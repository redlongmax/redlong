<?xml version="1.0" encoding="UTF-8"?>

<!--<beans xmlns="http://www.springframework.org/schema/beans"-->
       <!--xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"-->
       <!--xmlns:p="http://www.springframework.org/schema/p"-->
       <!--xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.alibaba.com/schema/stat"-->
       <!--xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd-->
                              <!--http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.alibaba.com/schema/stat http://www.alibaba.com/schema/stat.xsd">-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        ">

    <!-- 建议分包扫描各个组件 -->
    <context:component-scan base-package="com.itlaobing.mapper" />
    <context:component-scan base-package="com.itlaobing.service" />
    <context:component-scan base-package="com.itlaobing.web.controller" />
    <!-- 读取类路径下的属性文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!-- 使用 阿里提供的 Druid 组件来管理数据库连接 -->
    <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">-->
        <!--&lt;!&ndash; 数据库基本信息配置 &ndash;&gt;-->
        <!--<property name="url" value="${jdbc.url}" />-->
        <!--<property name="username" value="${jdbc.user}" />-->
        <!--<property name="password" value="${jdbc.password}" />-->
        <!--<property name="driverClassName" value="${jdbc.driver}" />-->
        <!--<property name="filters" value="${druid.filters}" />-->
        <!--&lt;!&ndash; 最大并发连接数 &ndash;&gt;-->
        <!--<property name="maxActive" value="${druid.maxActive}" />-->
        <!--&lt;!&ndash; 初始化连接数量 &ndash;&gt;-->
        <!--<property name="initialSize" value="${druid.initialSize}" />-->
        <!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="${druid.maxWait}" />-->
        <!--&lt;!&ndash; 最小空闲连接数 &ndash;&gt;-->
        <!--<property name="minIdle" value="${druid.minIdle}" />-->
        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />-->
        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />-->
        <!--<property name="validationQuery" value="${druid.validationQuery}" />-->
        <!--<property name="testWhileIdle" value="${druid.testWhileIdle}" />-->
        <!--<property name="testOnBorrow" value="${druid.testOnBorrow}" />-->
        <!--<property name="testOnReturn" value="${druid.testOnReturn}" />-->
        <!--<property name="maxOpenPreparedStatements" value="${druid.maxOpenPreparedStatements}" />-->
        <!--&lt;!&ndash; 1800 秒，也就是 30 分钟 &ndash;&gt;-->
        <!--<property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />-->
        <!--&lt;!&ndash; 关闭 abanded 连接时输出错误日志 &ndash;&gt;-->
        <!--<property name="logAbandoned" value="${druid.logAbandoned}" />-->


    <!--</bean>-->
    <!-- 使用dbcp来管理数据库连接 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>
    <!-- 提供 SqlSessionFactoryBean 配置用来创建 SqlSessionFactory 对象  -->
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath:com/itlaobing/mapper/*.xml" />
    </bean>

    <!-- 扫描 Mapper 接口所在的包 ( 为相应的接口动态创建相应的实现类 ) -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 为 MapperScannerConfigurer 注入 sqlSessionFactory  -->
        <property name="sqlSessionFactoryBeanName" value="sessionFactory" />
        <!-- 扫描 Mapper 接口所在的包 ( 就是目前的 Mapper 所在的包 ) -->
        <property name="basePackage" value="com.itlaobing.mapper" />
    </bean>

    <!-- 配置平台事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 为注解提供 事务管理器 支持-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>